[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "slm-edge-mlops"
version = "0.1.0"
description = "ML Edge project for fine-tuning small language models for intent classification using AWS services"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "ML Edge Team", email = "team@example.com"}
]
maintainers = [
    {name = "ML Edge Team", email = "team@example.com"}
]
requires-python = ">=3.9"
dependencies = []

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "moto[all]>=4.2.0",  # AWS mocking for tests
    
    # Code quality
    "ruff>=0.1.0",
    "pyright>=1.1.0",
    "pre-commit>=3.4.0",
    
    # Build tools
    "build>=0.10.0",
    "setuptools>=61.0",
    "wheel>=0.40.0",
]

[tool.setuptools.packages.find]
where = ["src"]
include = ["slm_edge_mlops*"]
exclude = ["tests*"]

[tool.setuptools.package-dir]
"" = "src"

# ==============================================================================
# RUFF CONFIGURATION (Linting and Formatting)
# ==============================================================================

[tool.ruff]
# Assume Python 3.9+
target-version = "py39"

# Same as Black's default line length
line-length = 88

# Enable specific rule sets
lint.select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # Pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "ARG",    # flake8-unused-arguments
    "COM",    # flake8-commas
    "T20",    # flake8-print
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "RUF",    # Ruff-specific rules
]

# Ignore specific rules
lint.ignore = [
    "E501",   # Line too long (handled by formatter)
    "B008",   # Do not perform function calls in argument defaults
    "T201",   # Allow print statements
    "COM812", # Missing trailing comma (handled by formatter)
]

# Exclude patterns
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "docs",
]

# Allow fix for all enabled rules (when `--fix`) is provided
lint.fixable = ["ALL"]
lint.unfixable = []

# Allow unused variables when underscore-prefixed
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Tests can use magic values, assertions, and imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
# Scripts can use print statements
"scripts/**/*" = ["T201"]

[tool.ruff.lint.isort]
known-first-party = ["slm_edge_mlops"]
known-third-party = [
    "torch",
    "transformers",
    "datasets",
    "sagemaker",
    "boto3",
    "pandas",
    "numpy",
    "sklearn",
    "great_expectations",
    "wandb",
    "mlflow",
]

[tool.ruff.lint.mccabe]
max-complexity = 10

# ==============================================================================
# PYRIGHT CONFIGURATION (Type Checking)
# ==============================================================================

[tool.pyright]
include = ["src", "tests"]
exclude = [
    "**/node_modules",
    "**/__pycache__",
    ".venv",
    "build",
    "dist"
]

# Type checking mode
typeCheckingMode = "basic"  # Options: "off", "basic", "strict"

# Python version
pythonVersion = "3.9"
pythonPlatform = "All"

# Disable specific warnings for libraries without stubs
reportMissingModuleSource = false

# ==============================================================================
# PYTEST CONFIGURATION
# ==============================================================================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=slm_edge_mlops",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
pythonpath = ["src"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "aws: marks tests that require AWS services (mocked or real)",
    "gpu: marks tests that require GPU",
    "model: marks tests that require model files",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# ==============================================================================
# COVERAGE CONFIGURATION
# ==============================================================================

[tool.coverage.run]
source = ["slm_edge_mlops"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "*/venv/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"
